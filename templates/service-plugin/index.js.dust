"use strict";

const Boom = require('boom');
const joi = require('./../../lib/joi-ext.js'); 
const valid = require('./validation.js');

module.exports.plugin = {
    register: (server) => {
        // Get repository from stored facade object
        const repo = server.settings.app.facade.{nameAsVariable};
        // Routes setup
        server.route([
        {
            path: '{endpoint}/{~lb}id{~rb}',
            method: 'GET',
            handler: async (request, h) => {
                try {
                    return await repo.load(request.params.id);
                } catch (err) {
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    params: {
                        id: joi.id()
                    },
                    query: {
                        client: joi.clientId(),
                        debug: joi.debugFlag()
                    }
                },
                tags: ['api', '{name}'],
                description: 'Get a single {name} entity'
            }
        },
        {
            path: '{endpoint}',
            method: 'GET',
            handler: async (request, h) => {
                try {
                    return await repo.list(request.query);
                } catch (err) {
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    query: valid.list{nameAsClass}
                },
                tags: ['api', '{name}'],
                description: 'List of {name} entities'
            }
        },
        {
            path: '{endpoint}',
            method: 'POST',
            handler: async (request, h) => {
                try {
                    return await repo.add(request.payload);
                } catch (err) {
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    payload: valid.add{nameAsClass},
                    query: {
                        client: joi.clientId(),
                        debug: joi.debugFlag()
                    }
                },
                tags: ['api', '{name}'],
                description: 'Create and save new {name} entity'
            }
        },
        {
            path: '{endpoint}',
            method: 'PUT',
            handler: async (request, h) => {
                try {
                    return await repo.update(request.payload);
                } catch (err) {
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    payload: valid.update{nameAsClass},
                    query: {
                        client: joi.clientId(),
                        debug: joi.debugFlag()
                    }
                },
                tags: ['api', '{name}'],
                description: 'Update and save existing {name} entity'
            }
        },
        {
            path: '{endpoint}/{~lb}id{~rb}',
            method: 'DELETE',
            handler: async (request, h) => {
                try {
                    return await repo.remove(request.params.id);
                } catch (err) {
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    params: joi.id(),
                    query: {
                        client: joi.clientId(),
                        debug: joi.debugFlag()
                    }
                },
                tags: ['api', '{name}'],
                description: 'Delete a single {name} entity'
            }
        }
    ]);
},
    name: '{name}',
    version: '{version}'
};