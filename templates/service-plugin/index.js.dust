"use strict";

const Boom = require('boom');
const validate = require('./validate.js');

module.exports.plugin = {
    register: (server) => {
        // Get repository 
        const repo = server.settings.app.facade.{nameAsVariable};
        // Routes setup
        server.route([
        {
            path: '{endpoint}',
            method: 'GET',
            handler: async (request, h) => {
                try {
                    return await repo.list();
                } catch (err) {
                    console.error(err);
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    query: validate.list
                },
                tags: ['api', '{name}'],
                description: 'List {name}'
            }
        },
        {
            path: '{endpoint}/{~lb}type{~rb}',
            method: 'POST',
            handler: async (request, h) => {
                try {
                    return await repo.create(request.params.type, request.payload);
                } catch (err) {
                    console.error(err);
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    params: validate.type,
                    payload: validate.save
                },
                tags: ['api', '{name}'],
                description: 'Save {name}'
            }
        },
        {
            path: '{endpoint}/{~lb}id{~rb}',
            method: 'PUT',
            handler: async (request, h) => {
                try {
                    return await repo.update(request.params.id);
                } catch (err) {
                    console.error(err);
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    params: validate.id
                },
                tags: ['api', '{name}'],
                description: 'Get a {name}'
            }
        },
        {
            path: '{endpoint}/{~lb}id{~rb}',
            method: 'DELETE',
            handler: async (request, h) => {
                try {
                    return await repo.remove(request.params.id);
                } catch (err) {
                    console.error(err);
                    return Boom.boomify(err, {~lb} statusCode: 400 {~rb});
                }
            },
            options: {
                auth: false,
                validate: {
                    params: validate.id
                },
                tags: ['api', '{name}'],
                description: 'Delete a {name}'
            }
        }
    ]);
},
    name: '{name}',
    version: '{version}'
};