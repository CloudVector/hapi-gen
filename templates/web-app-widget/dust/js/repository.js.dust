"use strict";

const RepositoryBase = require('./../../../lib/repository-base.js');
const {nameAsClass}Model = require('./{name}Model.js');
const tools = require('./../../../src/js/tools.js');
const internals = {};

/* Calculates page offset */
internals.skip = (page, size) => {
    var result = 0;
    if (page > 1) {
        result = (page -1) * size;
    }
    return result;
};

/*
* Data operation component for {name}
* Note: convert any method to async function as required
* @class Repository
* @constructor
* @extends RepositoryBase
*/
class Repository extends RepositoryBase {
    /*
    * Constructor to receive database (or other) options
    */
    constructor (db) {
        super(db);
    }

    /**
    * Returns a single contact entity by id
    *
    * @method read
    * @param {~lb}String{~rb} id - entity id
    *
    * @return {~lb}Promise{~rb} object
    */
    read (id) {
        return id;
    }

    /**
    * Creates a single contact entity
    *
    * @method create
    * @param {~lb}Object{~rb} entity - data to create contact
    *
    * @return {~lb}Promise{~rb} object
    */
    create (entity) {
        return entity;
    }

    /**
    * Updates a single contact entity
    *
    * @method update
    * @param {~lb}String{~rb} id - entity id
    *
    * @return {~lb}Promise{~rb} object
    */
    update (entity) {
        return entity;
    }

    /**
    * Removes a single contact entity by id
    *
    * @method remove
    * @param {~lb}String{~rb} id - entity id
    *
    * @return {~lb}Promise{~rb} object
    */
    remove (id) {
        return id;
    }

    /**
    * Returns multiple contacts based on some filters and sorting
    *
    * @method list
    * @param {~lb}Object{~rb} params - search and paging parameters
    *
    * @return {~lb}Object{~rb} list of search results
    */
    async list (params) {
        return [];
    }
}

module.exports = Repository;