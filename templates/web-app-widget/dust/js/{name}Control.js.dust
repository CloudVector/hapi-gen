/*global window, {namespace}, dust, $ */
"use strict";

/**
* Client side Control to handle events and local logic
* @class {nameAsClass}Control
* @param {~lb}Object{~rb} options
* @constructor
*/
var {nameAsClass}Control = function (options) {
    var self = this,
    _dom = {~lb}{~rb},
    detailClicked,
    getData,
    bind;

    /**
    * Options
    * @property options
    */
    self.options = options || {~lb}{~rb};
    // Set defaults
    self.options.container = self.options.container || '#{name}';
    self.options.container = typeof self.options.container === 'string' ? $(self.options.container) : self.options.container;
    self.options.template = self.options.template || '{name}.dust';

    /**
    * {nameAsClass} Model
    * @property {nameAsClass}Model model
    */
    self.model = null;

    /* Client component */
    self.client = new {nameAsClass}Client();

    /* Binding events to DOM elements */
    bind = function (cb) {
        // Create and cache DOM elements
        _dom.body = $('body');
        _dom.items = $('#{name}-items');
        _dom.items.on('click', '.js-detail', detailClicked);
        if (typeof cb === 'function') {
            cb();
        }
    };

    /* When detail clicked */
    detailClicked = function () {
        var id = $(this).data('id');
        console.log('DETAIL:', id);
    }

    /**
    * Rendering HTML content for control
    * @method render
    * @param {~lb}Function{~rb} callback
    * @return {~lb}Undefined{~rb}
    */
    self.render = function (cb) {
        dust.render(self.options.template, self.model, function (err, out) {
            self.options.container.off().html('').append(out);
            if (typeof cb === 'function') {
                cb();
            }
        });
    };

    /**
    * Initialize component
    * @method init
    * @param {~lb}Function{~rb} callback
    * @return {~lb}Undefined{~rb}
    */
    self.init = function (cb) {
        // Init all components
        var initComponents = function () {
            bind(cb);
        };
        // Create model
        self.model = (self.options.model) ? self.options.model : new {namespace}.{nameAsClass}Model(self.options);
        // Check if navigation rendered on server side if not render it!
        if (self.options.container.html() === '') {
            self.render(initComponents);
        } else {
            initComponents();
        }
    };
};

window.{namespace} = window.{namespace} || {};
window.{namespace}.{nameAsClass}Control = {nameAsClass}Control;